type token =
  | INT of (int)
  | IDENT of (String)
  | LOCAT of (String)
  | SKIP
  | TRUE
  | FALSE
  | ADD
  | SUB
  | MUL
  | DIV
  | EQUALS
  | GTEQ
  | ASSIGN
  | LPAREN
  | RPAREN
  | SEMICOLON
  | COLON
  | ARROW
  | BANG
  | DARROW
  | END
  | WHILE
  | DO
  | IF
  | THEN
  | ELSE
  | LAMBDA
  | LET
  | IN
  | LETREC
  | FUN
  | BEGIN
  | INTTYPE
  | BOOLTYPE
  | UNITTYPE
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"

let get_loc = Parsing.symbol_start_pos 

# 46 "parser.ml"
let yytransl_const = [|
  260 (* SKIP *);
  261 (* TRUE *);
  262 (* FALSE *);
  263 (* ADD *);
  264 (* SUB *);
  265 (* MUL *);
  266 (* DIV *);
  267 (* EQUALS *);
  268 (* GTEQ *);
  269 (* ASSIGN *);
  270 (* LPAREN *);
  271 (* RPAREN *);
  272 (* SEMICOLON *);
  273 (* COLON *);
  274 (* ARROW *);
  275 (* BANG *);
  276 (* DARROW *);
  277 (* END *);
  278 (* WHILE *);
  279 (* DO *);
  280 (* IF *);
  281 (* THEN *);
  282 (* ELSE *);
  283 (* LAMBDA *);
  284 (* LET *);
  285 (* IN *);
  286 (* LETREC *);
  287 (* FUN *);
  288 (* BEGIN *);
  289 (* INTTYPE *);
  290 (* BOOLTYPE *);
  291 (* UNITTYPE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* IDENT *);
  259 (* LOCAT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\005\000\005\000\005\000\005\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\003\000\001\000\002\000\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\006\000\004\000\003\000\006\000\009\000\016\000\003\000\
\001\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\007\000\000\000\003\000\004\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\029\000\009\000\000\000\000\000\010\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\011\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\000\026\000\
\027\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000"

let yydgoto = "\002\000\
\018\000\019\000\030\000\031\000\058\000"

let yysindex = "\006\000\
\148\255\000\000\000\000\000\000\013\255\000\000\000\000\000\000\
\148\255\148\255\036\255\148\255\148\255\054\255\056\255\067\255\
\148\255\000\000\000\000\134\000\148\255\000\000\245\255\000\000\
\207\255\195\255\010\255\030\255\047\255\093\255\052\255\148\255\
\148\255\148\255\148\255\148\255\000\000\000\000\158\000\000\000\
\148\255\148\255\225\254\225\254\225\254\148\255\000\000\154\255\
\154\255\062\255\062\255\121\255\158\000\180\255\000\000\000\000\
\000\000\011\255\059\255\024\255\000\000\148\255\148\255\225\254\
\061\255\148\255\158\000\045\255\064\255\048\255\158\000\148\255\
\078\255\009\255\066\255\000\000\225\254\025\255\148\255\146\000\
\057\255\148\255\227\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\072\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\048\000\001\000\024\000\060\000\084\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\096\000\000\000\017\255\000\000\108\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\065\000\255\255\043\000\217\255"

let yytablesize = 428
let yytable = "\020\000\
\014\000\055\000\056\000\057\000\059\000\060\000\001\000\022\000\
\023\000\003\000\025\000\026\000\006\000\007\000\008\000\032\000\
\033\000\034\000\035\000\039\000\036\000\063\000\010\000\015\000\
\069\000\021\000\043\000\028\000\064\000\076\000\048\000\049\000\
\050\000\051\000\052\000\012\000\028\000\078\000\024\000\053\000\
\054\000\064\000\064\000\066\000\079\000\003\000\044\000\013\000\
\006\000\007\000\008\000\032\000\033\000\034\000\035\000\027\000\
\036\000\028\000\010\000\016\000\067\000\068\000\003\000\045\000\
\071\000\006\000\007\000\008\000\029\000\065\000\074\000\017\000\
\047\000\072\000\070\000\010\000\064\000\080\000\073\000\075\000\
\083\000\064\000\077\000\019\000\038\000\082\000\038\000\038\000\
\061\000\038\000\038\000\000\000\000\000\003\000\038\000\018\000\
\006\000\007\000\008\000\032\000\033\000\034\000\035\000\038\000\
\036\000\000\000\010\000\021\000\046\000\000\000\000\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\
\000\000\003\000\000\000\000\000\006\000\007\000\008\000\032\000\
\033\000\034\000\035\000\038\000\038\000\037\000\010\000\038\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
\038\000\000\000\000\000\038\000\003\000\004\000\005\000\006\000\
\007\000\008\000\003\000\009\000\000\000\006\000\007\000\008\000\
\000\000\010\000\034\000\035\000\000\000\000\000\011\000\010\000\
\000\000\012\000\000\000\013\000\000\000\000\000\000\000\014\000\
\000\000\015\000\016\000\017\000\003\000\000\000\000\000\006\000\
\007\000\008\000\032\000\033\000\034\000\035\000\000\000\036\000\
\000\000\010\000\000\000\003\000\000\000\000\000\006\000\007\000\
\008\000\032\000\033\000\034\000\035\000\062\000\036\000\003\000\
\010\000\000\000\006\000\007\000\008\000\032\000\033\000\034\000\
\035\000\000\000\036\000\042\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\000\000\041\000\006\000\007\000\
\008\000\032\000\033\000\034\000\035\000\000\000\036\000\000\000\
\010\000\000\000\000\000\000\000\000\000\003\000\000\000\084\000\
\006\000\007\000\008\000\032\000\033\000\034\000\035\000\000\000\
\036\000\000\000\010\000\040\000\000\000\000\000\000\000\014\000\
\014\000\014\000\014\000\000\000\014\000\000\000\000\000\014\000\
\014\000\000\000\000\000\000\000\000\000\014\000\000\000\014\000\
\000\000\014\000\014\000\000\000\000\000\014\000\015\000\015\000\
\015\000\015\000\000\000\015\000\000\000\000\000\015\000\015\000\
\000\000\000\000\012\000\012\000\015\000\000\000\015\000\012\000\
\015\000\015\000\012\000\012\000\015\000\000\000\013\000\013\000\
\012\000\000\000\012\000\013\000\012\000\012\000\013\000\013\000\
\012\000\000\000\000\000\000\000\013\000\000\000\013\000\016\000\
\013\000\013\000\016\000\016\000\013\000\000\000\000\000\000\000\
\016\000\000\000\016\000\000\000\016\000\016\000\017\000\017\000\
\016\000\000\000\000\000\000\000\017\000\000\000\017\000\000\000\
\017\000\017\000\019\000\019\000\017\000\000\000\000\000\000\000\
\019\000\000\000\019\000\000\000\019\000\019\000\018\000\018\000\
\019\000\000\000\000\000\000\000\018\000\000\000\018\000\000\000\
\018\000\018\000\021\000\021\000\018\000\000\000\000\000\000\000\
\021\000\000\000\021\000\000\000\021\000\021\000\003\000\000\000\
\021\000\006\000\007\000\008\000\032\000\033\000\034\000\035\000\
\000\000\036\000\003\000\010\000\000\000\006\000\007\000\008\000\
\032\000\033\000\034\000\035\000\000\000\036\000\003\000\010\000\
\081\000\006\000\007\000\008\000\032\000\033\000\034\000\035\000\
\000\000\036\000\000\000\010\000"

let yycheck = "\001\000\
\000\000\033\001\034\001\035\001\044\000\045\000\001\000\009\000\
\010\000\001\001\012\000\013\000\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\021\000\012\001\011\001\014\001\000\000\
\064\000\013\001\017\001\011\001\018\001\021\001\032\000\033\000\
\034\000\035\000\036\000\000\000\020\001\077\000\003\001\041\000\
\042\000\018\001\018\001\020\001\020\001\001\001\017\001\000\000\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\002\001\
\012\001\002\001\014\001\000\000\062\000\063\000\001\001\017\001\
\066\000\004\001\005\001\006\001\002\001\011\001\072\000\000\000\
\021\001\029\001\014\001\014\001\018\001\079\000\031\001\002\001\
\082\000\018\001\017\001\000\000\020\000\029\001\022\000\023\000\
\046\000\025\000\026\000\255\255\255\255\001\001\030\000\000\000\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\039\000\
\012\001\255\255\014\001\000\000\016\001\255\255\255\255\255\255\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\255\255\
\255\255\001\001\255\255\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\067\000\068\000\000\000\014\001\071\000\
\255\255\255\255\074\000\255\255\255\255\255\255\255\255\255\255\
\080\000\255\255\255\255\083\000\001\001\002\001\003\001\004\001\
\005\001\006\001\001\001\008\001\255\255\004\001\005\001\006\001\
\255\255\014\001\009\001\010\001\255\255\255\255\019\001\014\001\
\255\255\022\001\255\255\024\001\255\255\255\255\255\255\028\001\
\255\255\030\001\031\001\032\001\001\001\255\255\255\255\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\255\255\012\001\
\255\255\014\001\255\255\001\001\255\255\255\255\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\026\001\012\001\001\001\
\014\001\255\255\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\255\255\012\001\025\001\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\255\255\023\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\012\001\255\255\
\014\001\255\255\255\255\255\255\255\255\001\001\255\255\021\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\015\001\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\255\255\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\021\001\255\255\023\001\
\255\255\025\001\026\001\255\255\255\255\029\001\007\001\008\001\
\009\001\010\001\255\255\012\001\255\255\255\255\015\001\016\001\
\255\255\255\255\007\001\008\001\021\001\255\255\023\001\012\001\
\025\001\026\001\015\001\016\001\029\001\255\255\007\001\008\001\
\021\001\255\255\023\001\012\001\025\001\026\001\015\001\016\001\
\029\001\255\255\255\255\255\255\021\001\255\255\023\001\012\001\
\025\001\026\001\015\001\016\001\029\001\255\255\255\255\255\255\
\021\001\255\255\023\001\255\255\025\001\026\001\015\001\016\001\
\029\001\255\255\255\255\255\255\021\001\255\255\023\001\255\255\
\025\001\026\001\015\001\016\001\029\001\255\255\255\255\255\255\
\021\001\255\255\023\001\255\255\025\001\026\001\015\001\016\001\
\029\001\255\255\255\255\255\255\021\001\255\255\023\001\255\255\
\025\001\026\001\015\001\016\001\029\001\255\255\255\255\255\255\
\021\001\255\255\023\001\255\255\025\001\026\001\001\001\255\255\
\029\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\255\255\012\001\001\001\014\001\255\255\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\012\001\001\001\014\001\
\015\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\255\255\012\001\255\255\014\001"

let yynames_const = "\
  SKIP\000\
  TRUE\000\
  FALSE\000\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  EQUALS\000\
  GTEQ\000\
  ASSIGN\000\
  LPAREN\000\
  RPAREN\000\
  SEMICOLON\000\
  COLON\000\
  ARROW\000\
  BANG\000\
  DARROW\000\
  END\000\
  WHILE\000\
  DO\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LAMBDA\000\
  LET\000\
  IN\000\
  LETREC\000\
  FUN\000\
  BEGIN\000\
  INTTYPE\000\
  BOOLTYPE\000\
  UNITTYPE\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  IDENT\000\
  LOCAT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    Obj.repr(
# 51 "parser.mly"
                               ( _1 )
# 308 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 55 "parser.mly"
                                         ( Past.Integer (get_loc(), _1) )
# 315 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                    ( Past.Skip (get_loc()) )
# 321 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
                   ( Past.Bool (get_loc(), true) )
# 327 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
                    ( Past.Bool (get_loc(), false) )
# 333 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    Obj.repr(
# 59 "parser.mly"
                                         ( _2 )
# 340 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : String) in
    Obj.repr(
# 63 "parser.mly"
                          ( Past.Ident (get_loc(), _1) )
# 347 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : String) in
    Obj.repr(
# 64 "parser.mly"
                       ( Past.Deref(get_loc(), _2) )
# 354 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 65 "parser.mly"
                                         ( _1 )
# 361 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 66 "parser.mly"
                                              ( Past.UnaryOp(get_loc(), Past.NEG, _2) )
# 368 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 67 "parser.mly"
                             ( Past.App(get_loc(), _1, _2) )
# 376 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 68 "parser.mly"
                                         ( Past.Op(get_loc(), _1, Past.ADD,  _3) )
# 384 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 69 "parser.mly"
                                         ( Past.Op(get_loc(), _1, Past.SUB,  _3) )
# 392 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 70 "parser.mly"
                                         ( Past.Op(get_loc(), _1, Past.MUL,  _3) )
# 400 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 71 "parser.mly"
                                         ( Past.Op(get_loc(), _1, Past.DIV,  _3) )
# 408 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 72 "parser.mly"
                          ( Past.Op(get_loc(), _1, Past.GTEQ, _3) )
# 416 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : String) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 73 "parser.mly"
                             ( Past.Assign(get_loc(), _1, _3) )
# 424 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Past.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 74 "parser.mly"
                                      ( Past.If(get_loc(), _2, _4, _6) )
# 433 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 75 "parser.mly"
                                         ( Past.While(get_loc(), _2, _4) )
# 441 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Past.expr list) in
    Obj.repr(
# 76 "parser.mly"
                            ( Past.Seq(get_loc(), _2) )
# 448 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : String) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Past.type_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Past.expr) in
    Obj.repr(
# 77 "parser.mly"
                                           ( Past.Lambda(get_loc(), (_2, _4, _6)) )
# 457 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : String) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Past.type_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Past.expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    Obj.repr(
# 78 "parser.mly"
                                                    ( Past.Let(get_loc(), _2, _4, _6, _8) )
# 467 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 14 : String) in
    let _4 = (Parsing.peek_val __caml_parser_env 12 : Past.type_expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 8 : String) in
    let _10 = (Parsing.peek_val __caml_parser_env 6 : Past.type_expr) in
    let _12 = (Parsing.peek_val __caml_parser_env 4 : Past.expr) in
    let _15 = (Parsing.peek_val __caml_parser_env 1 : Past.expr) in
    Obj.repr(
# 79 "parser.mly"
                                                                                                   ( Past.LetRecFn(get_loc(), _2, _4, _8, _10, _12, _15) )
# 479 "parser.ml"
               : Past.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.expr list) in
    Obj.repr(
# 82 "parser.mly"
                                ( _1::_3 )
# 487 "parser.ml"
               : Past.expr list))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                 ( Past.TEInt )
# 493 "parser.ml"
               : Past.type_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                  ( Past.TEBool )
# 499 "parser.ml"
               : Past.type_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                  ( Past.TEUnit )
# 505 "parser.ml"
               : Past.type_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Past.type_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Past.type_expr) in
    Obj.repr(
# 88 "parser.mly"
                                     ( Past.TEarrow (_1, _3))
# 513 "parser.ml"
               : Past.type_expr))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Past.expr)
