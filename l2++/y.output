Terminals which are not used

   SEMICOLON
   LAMBDA
   UMINUS


Grammar

    0 $accept: main $end

    1 main: expr EOF

    2 simple_expr: INT
    3            | SKIP
    4            | TRUE
    5            | FALSE
    6            | LPAREN expr RPAREN

    7 expr: IDENT
    8     | BANG LOCAT
    9     | simple_expr
   10     | SUB expr
   11     | expr simple_expr
   12     | expr ADD expr
   13     | expr SUB expr
   14     | expr MUL expr
   15     | expr DIV expr
   16     | expr GTEQ expr
   17     | IF expr THEN expr ELSE expr
   18     | LOCAT ASSIGN expr
   19     | WHILE expr DO expr
   20     | FUN IDENT COLON typexpr DARROW expr
   21     | LET IDENT COLON typexpr EQUALS expr IN expr END
   22     | LETREC IDENT COLON typexpr EQUALS LPAREN FUN IDENT COLON typexpr DARROW expr RPAREN IN expr END

   23 typexpr: INTTYPE
   24        | BOOLTYPE
   25        | UNITTYPE
   26        | typexpr ARROW typexpr


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 2
IDENT (259) 7 20 21 22
LOCAT (260) 8 18
SKIP (261) 3
TRUE (262) 4
FALSE (263) 5
ADD (264) 12
SUB (265) 10 13
MUL (266) 14
DIV (267) 15
EQUALS (268) 21 22
GTEQ (269) 16
ASSIGN (270) 18
LPAREN (271) 6 22
RPAREN (272) 6 22
SEMICOLON (273)
COLON (274) 20 21 22
ARROW (275) 26
BANG (276) 8
DARROW (277) 20 22
END (278) 21 22
WHILE (279) 19
DO (280) 19
IF (281) 17
THEN (282) 17
ELSE (283) 17
LAMBDA (284)
LET (285) 21
IN (286) 21 22
LETREC (287) 22
FUN (288) 20 22
INTTYPE (289) 23
BOOLTYPE (290) 24
UNITTYPE (291) 25
EOF (292) 1
UMINUS (293)


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
main (40)
    on left: 1, on right: 0
simple_expr (41)
    on left: 2 3 4 5 6, on right: 9 11
expr (42)
    on left: 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22,
    on right: 1 6 10 11 12 13 14 15 16 17 18 19 20 21 22
typexpr (43)
    on left: 23 24 25 26, on right: 20 21 22 26


state 0

    0 $accept: . main $end

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    main         go to state 15
    simple_expr  go to state 16
    expr         go to state 17


state 1

    2 simple_expr: INT .

    $default  reduce using rule 2 (simple_expr)


state 2

    7 expr: IDENT .

    $default  reduce using rule 7 (expr)


state 3

   18 expr: LOCAT . ASSIGN expr

    ASSIGN  shift, and go to state 18


state 4

    3 simple_expr: SKIP .

    $default  reduce using rule 3 (simple_expr)


state 5

    4 simple_expr: TRUE .

    $default  reduce using rule 4 (simple_expr)


state 6

    5 simple_expr: FALSE .

    $default  reduce using rule 5 (simple_expr)


state 7

   10 expr: SUB . expr

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 19


state 8

    6 simple_expr: LPAREN . expr RPAREN

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 20


state 9

    8 expr: BANG . LOCAT

    LOCAT  shift, and go to state 21


state 10

   19 expr: WHILE . expr DO expr

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 22


state 11

   17 expr: IF . expr THEN expr ELSE expr

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 23


state 12

   21 expr: LET . IDENT COLON typexpr EQUALS expr IN expr END

    IDENT  shift, and go to state 24


state 13

   22 expr: LETREC . IDENT COLON typexpr EQUALS LPAREN FUN IDENT COLON typexpr DARROW expr RPAREN IN expr END

    IDENT  shift, and go to state 25


state 14

   20 expr: FUN . IDENT COLON typexpr DARROW expr

    IDENT  shift, and go to state 26


state 15

    0 $accept: main . $end

    $end  shift, and go to state 27


state 16

    9 expr: simple_expr .

    $default  reduce using rule 9 (expr)


state 17

    1 main: expr . EOF
   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    GTEQ    shift, and go to state 32
    LPAREN  shift, and go to state 8
    EOF     shift, and go to state 33

    simple_expr  go to state 34


state 18

   18 expr: LOCAT ASSIGN . expr

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 35


state 19

   10 expr: SUB expr .
   11     | expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr

    INT     error (nonassociative)
    SKIP    error (nonassociative)
    TRUE    error (nonassociative)
    FALSE   error (nonassociative)
    LPAREN  error (nonassociative)

    $default  reduce using rule 10 (expr)

    simple_expr  go to state 34


state 20

    6 simple_expr: LPAREN expr . RPAREN
   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    GTEQ    shift, and go to state 32
    LPAREN  shift, and go to state 8
    RPAREN  shift, and go to state 36

    simple_expr  go to state 34


state 21

    8 expr: BANG LOCAT .

    $default  reduce using rule 8 (expr)


state 22

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr
   19     | WHILE expr . DO expr

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    GTEQ    shift, and go to state 32
    LPAREN  shift, and go to state 8
    DO      shift, and go to state 37

    simple_expr  go to state 34


state 23

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr
   17     | IF expr . THEN expr ELSE expr

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    GTEQ    shift, and go to state 32
    LPAREN  shift, and go to state 8
    THEN    shift, and go to state 38

    simple_expr  go to state 34


state 24

   21 expr: LET IDENT . COLON typexpr EQUALS expr IN expr END

    COLON  shift, and go to state 39


state 25

   22 expr: LETREC IDENT . COLON typexpr EQUALS LPAREN FUN IDENT COLON typexpr DARROW expr RPAREN IN expr END

    COLON  shift, and go to state 40


state 26

   20 expr: FUN IDENT . COLON typexpr DARROW expr

    COLON  shift, and go to state 41


state 27

    0 $accept: main $end .

    $default  accept


state 28

   12 expr: expr ADD . expr

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 42


state 29

   13 expr: expr SUB . expr

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 43


state 30

   14 expr: expr MUL . expr

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 44


state 31

   15 expr: expr DIV . expr

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 45


state 32

   16 expr: expr GTEQ . expr

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 46


state 33

    1 main: expr EOF .

    $default  reduce using rule 1 (main)


state 34

   11 expr: expr simple_expr .

    $default  reduce using rule 11 (expr)


state 35

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr
   18     | LOCAT ASSIGN expr .

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    GTEQ    shift, and go to state 32
    LPAREN  shift, and go to state 8

    $default  reduce using rule 18 (expr)

    simple_expr  go to state 34


state 36

    6 simple_expr: LPAREN expr RPAREN .

    $default  reduce using rule 6 (simple_expr)


state 37

   19 expr: WHILE expr DO . expr

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 47


state 38

   17 expr: IF expr THEN . expr ELSE expr

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 48


state 39

   21 expr: LET IDENT COLON . typexpr EQUALS expr IN expr END

    INTTYPE   shift, and go to state 49
    BOOLTYPE  shift, and go to state 50
    UNITTYPE  shift, and go to state 51

    typexpr  go to state 52


state 40

   22 expr: LETREC IDENT COLON . typexpr EQUALS LPAREN FUN IDENT COLON typexpr DARROW expr RPAREN IN expr END

    INTTYPE   shift, and go to state 49
    BOOLTYPE  shift, and go to state 50
    UNITTYPE  shift, and go to state 51

    typexpr  go to state 53


state 41

   20 expr: FUN IDENT COLON . typexpr DARROW expr

    INTTYPE   shift, and go to state 49
    BOOLTYPE  shift, and go to state 50
    UNITTYPE  shift, and go to state 51

    typexpr  go to state 54


state 42

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   12     | expr ADD expr .
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    LPAREN  shift, and go to state 8

    $default  reduce using rule 12 (expr)

    simple_expr  go to state 34


state 43

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   13     | expr SUB expr .
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    LPAREN  shift, and go to state 8

    $default  reduce using rule 13 (expr)

    simple_expr  go to state 34


state 44

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   14     | expr MUL expr .
   15     | expr . DIV expr
   16     | expr . GTEQ expr

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    LPAREN  shift, and go to state 8

    $default  reduce using rule 14 (expr)

    simple_expr  go to state 34


state 45

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   15     | expr DIV expr .
   16     | expr . GTEQ expr

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    LPAREN  shift, and go to state 8

    $default  reduce using rule 15 (expr)

    simple_expr  go to state 34


state 46

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr
   16     | expr GTEQ expr .

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    LPAREN  shift, and go to state 8

    $default  reduce using rule 16 (expr)

    simple_expr  go to state 34


state 47

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr
   19     | WHILE expr DO expr .

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    GTEQ    shift, and go to state 32
    LPAREN  shift, and go to state 8

    $default  reduce using rule 19 (expr)

    simple_expr  go to state 34


state 48

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr
   17     | IF expr THEN expr . ELSE expr

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    GTEQ    shift, and go to state 32
    LPAREN  shift, and go to state 8
    ELSE    shift, and go to state 55

    simple_expr  go to state 34


state 49

   23 typexpr: INTTYPE .

    $default  reduce using rule 23 (typexpr)


state 50

   24 typexpr: BOOLTYPE .

    $default  reduce using rule 24 (typexpr)


state 51

   25 typexpr: UNITTYPE .

    $default  reduce using rule 25 (typexpr)


state 52

   21 expr: LET IDENT COLON typexpr . EQUALS expr IN expr END
   26 typexpr: typexpr . ARROW typexpr

    EQUALS  shift, and go to state 56
    ARROW   shift, and go to state 57


state 53

   22 expr: LETREC IDENT COLON typexpr . EQUALS LPAREN FUN IDENT COLON typexpr DARROW expr RPAREN IN expr END
   26 typexpr: typexpr . ARROW typexpr

    EQUALS  shift, and go to state 58
    ARROW   shift, and go to state 57


state 54

   20 expr: FUN IDENT COLON typexpr . DARROW expr
   26 typexpr: typexpr . ARROW typexpr

    ARROW   shift, and go to state 57
    DARROW  shift, and go to state 59


state 55

   17 expr: IF expr THEN expr ELSE . expr

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 60


state 56

   21 expr: LET IDENT COLON typexpr EQUALS . expr IN expr END

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 61


state 57

   26 typexpr: typexpr ARROW . typexpr

    INTTYPE   shift, and go to state 49
    BOOLTYPE  shift, and go to state 50
    UNITTYPE  shift, and go to state 51

    typexpr  go to state 62


state 58

   22 expr: LETREC IDENT COLON typexpr EQUALS . LPAREN FUN IDENT COLON typexpr DARROW expr RPAREN IN expr END

    LPAREN  shift, and go to state 63


state 59

   20 expr: FUN IDENT COLON typexpr DARROW . expr

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 64


state 60

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr
   17     | IF expr THEN expr ELSE expr .

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    GTEQ    shift, and go to state 32
    LPAREN  shift, and go to state 8

    $default  reduce using rule 17 (expr)

    simple_expr  go to state 34


state 61

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr
   21     | LET IDENT COLON typexpr EQUALS expr . IN expr END

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    GTEQ    shift, and go to state 32
    LPAREN  shift, and go to state 8
    IN      shift, and go to state 65

    simple_expr  go to state 34


state 62

   26 typexpr: typexpr . ARROW typexpr
   26        | typexpr ARROW typexpr .

    ARROW  shift, and go to state 57

    $default  reduce using rule 26 (typexpr)


state 63

   22 expr: LETREC IDENT COLON typexpr EQUALS LPAREN . FUN IDENT COLON typexpr DARROW expr RPAREN IN expr END

    FUN  shift, and go to state 66


state 64

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr
   20     | FUN IDENT COLON typexpr DARROW expr .

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    GTEQ    shift, and go to state 32
    LPAREN  shift, and go to state 8

    $default  reduce using rule 20 (expr)

    simple_expr  go to state 34


state 65

   21 expr: LET IDENT COLON typexpr EQUALS expr IN . expr END

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 67


state 66

   22 expr: LETREC IDENT COLON typexpr EQUALS LPAREN FUN . IDENT COLON typexpr DARROW expr RPAREN IN expr END

    IDENT  shift, and go to state 68


state 67

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr
   21     | LET IDENT COLON typexpr EQUALS expr IN expr . END

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    GTEQ    shift, and go to state 32
    LPAREN  shift, and go to state 8
    END     shift, and go to state 69

    simple_expr  go to state 34


state 68

   22 expr: LETREC IDENT COLON typexpr EQUALS LPAREN FUN IDENT . COLON typexpr DARROW expr RPAREN IN expr END

    COLON  shift, and go to state 70


state 69

   21 expr: LET IDENT COLON typexpr EQUALS expr IN expr END .

    $default  reduce using rule 21 (expr)


state 70

   22 expr: LETREC IDENT COLON typexpr EQUALS LPAREN FUN IDENT COLON . typexpr DARROW expr RPAREN IN expr END

    INTTYPE   shift, and go to state 49
    BOOLTYPE  shift, and go to state 50
    UNITTYPE  shift, and go to state 51

    typexpr  go to state 71


state 71

   22 expr: LETREC IDENT COLON typexpr EQUALS LPAREN FUN IDENT COLON typexpr . DARROW expr RPAREN IN expr END
   26 typexpr: typexpr . ARROW typexpr

    ARROW   shift, and go to state 57
    DARROW  shift, and go to state 72


state 72

   22 expr: LETREC IDENT COLON typexpr EQUALS LPAREN FUN IDENT COLON typexpr DARROW . expr RPAREN IN expr END

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 73


state 73

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr
   22     | LETREC IDENT COLON typexpr EQUALS LPAREN FUN IDENT COLON typexpr DARROW expr . RPAREN IN expr END

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    GTEQ    shift, and go to state 32
    LPAREN  shift, and go to state 8
    RPAREN  shift, and go to state 74

    simple_expr  go to state 34


state 74

   22 expr: LETREC IDENT COLON typexpr EQUALS LPAREN FUN IDENT COLON typexpr DARROW expr RPAREN . IN expr END

    IN  shift, and go to state 75


state 75

   22 expr: LETREC IDENT COLON typexpr EQUALS LPAREN FUN IDENT COLON typexpr DARROW expr RPAREN IN . expr END

    INT     shift, and go to state 1
    IDENT   shift, and go to state 2
    LOCAT   shift, and go to state 3
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    SUB     shift, and go to state 7
    LPAREN  shift, and go to state 8
    BANG    shift, and go to state 9
    WHILE   shift, and go to state 10
    IF      shift, and go to state 11
    LET     shift, and go to state 12
    LETREC  shift, and go to state 13
    FUN     shift, and go to state 14

    simple_expr  go to state 16
    expr         go to state 76


state 76

   11 expr: expr . simple_expr
   12     | expr . ADD expr
   13     | expr . SUB expr
   14     | expr . MUL expr
   15     | expr . DIV expr
   16     | expr . GTEQ expr
   22     | LETREC IDENT COLON typexpr EQUALS LPAREN FUN IDENT COLON typexpr DARROW expr RPAREN IN expr . END

    INT     shift, and go to state 1
    SKIP    shift, and go to state 4
    TRUE    shift, and go to state 5
    FALSE   shift, and go to state 6
    ADD     shift, and go to state 28
    SUB     shift, and go to state 29
    MUL     shift, and go to state 30
    DIV     shift, and go to state 31
    GTEQ    shift, and go to state 32
    LPAREN  shift, and go to state 8
    END     shift, and go to state 77

    simple_expr  go to state 34


state 77

   22 expr: LETREC IDENT COLON typexpr EQUALS LPAREN FUN IDENT COLON typexpr DARROW expr RPAREN IN expr END .

    $default  reduce using rule 22 (expr)
